{"version":3,"sources":["../src/server/index.js"],"names":["require","config","app","log","graphQLRoute","ignoredMutations","contentSecurityPolicy","corsOrigins","publicDir","viewsDir","server","ApolloServer","debug","isDeployed","playground","tracing","isProduction","applyMiddleware","onHealthCheck","info","port","process","env","NODE_PORT","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,MAAMC,GAAG,GAAG,uBAAZ,C,CAEA;;AACA,MAAMC,GAAG,GAAG,qBAAa,QAAb,CAAZ;AAEA,yBAAiBD,GAAjB,EAAsB;AACnBE,EAAAA,YAAY,EAAE,UADK;AAEnBC,EAAAA,gBAAgB,EAAE,EAFC;AAGnBC,EAAAA,qBAAqB,EAAE,CAAC,QAAD,CAHJ;AAInBC,EAAAA,WAAW,EAAE,GAJM;AAKnBC,EAAAA,SAAS,EAAE,QALQ;AAMnBC,EAAAA,QAAQ,EAAE;AANS,CAAtB,E,CASA;;AACA,MAAMC,MAAM,GAAG,IAAIC,iCAAJ,CAAiB,EAC7B,GAAG,sBAD0B;AAE7BC,EAAAA,KAAK,EAAE,CAACC,+BAFqB;AAG7BC,EAAAA,UAAU,EAAE,CAACD,+BAHgB;AAI7BE,EAAAA,OAAO,EAAE,CAACC;AAJmB,CAAjB,CAAf,C,CAOA;;AACAN,MAAM,CAACO,eAAP,CAAuB;AACpBf,EAAAA,GADoB;AAEpBgB,EAAAA,aAAa,EAAE,YAAY;AACxBf,IAAAA,GAAG,CAACgB,IAAJ,CAAS,eAAT;AACA,WAAO,6BAAP;AACF;AALmB,CAAvB;AAQA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAzB;AACArB,GAAG,CAACsB,MAAJ,CAAW;AAAEJ,EAAAA;AAAF,CAAX,EAAqB,MAAM;AACxBjB,EAAAA,GAAG,CAACgB,IAAJ,CAAU,uCAAsCC,IAAK,EAArD;AACF,CAFD","sourcesContent":["import express from 'express';\nimport { ApolloServer } from 'apollo-server-express';\nimport buildSchema from './schema';\nimport healthCheck from './utils/healthChecker';\nimport createLogger from './utils/logger';\nimport { isDeployed, isProduction } from './utils/environmentResolver';\nimport attachMiddleware from './middleware';\n\nrequire('dotenv').config();\n\nconst app = express();\n\n// Setup logger for this startup sequence\nconst log = createLogger('Server');\n\nattachMiddleware(app, {\n   graphQLRoute: '/graphql',\n   ignoredMutations: [],\n   contentSecurityPolicy: [\"'self'\"],\n   corsOrigins: '*',\n   publicDir: 'public',\n   viewsDir: './src/server/views'\n});\n\n// Build out the GraphQL server\nconst server = new ApolloServer({\n   ...buildSchema(),\n   debug: !isDeployed,\n   playground: !isDeployed,\n   tracing: !isProduction\n});\n\n// Register GraphQL middleware\nserver.applyMiddleware({\n   app,\n   onHealthCheck: async () => {\n      log.info('health check.');\n      return healthCheck();\n   }\n});\n\nconst port = process.env.NODE_PORT;\napp.listen({ port }, () => {\n   log.info(`ðŸš€ Server ready at http://localhost:${port}`);\n});\n"],"file":"index.js"}