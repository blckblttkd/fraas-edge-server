{"version":3,"sources":["../../src/server/middleware/csrf.js"],"names":["log","csrf","options","req","res","next","ignoredMethods","ignoredMutations","includes","method","trace","spaceIndex","body","query","indexOf","operationType","substr","operationName","headerValue","header","tokenValue","token","csrfToken","error","status","json","message","app","route","use"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,GAAG,GAAG,qBAAa,iBAAb,CAAZ,C,CAEA;AACA;;AACA,MAAMC,IAAI,GAAIC,OAAD,IAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC3C,QAAM;AACHC,IAAAA,cAAc,GAAG,CAAC,KAAD,EAAQ,SAAR,EAAmB,MAAnB,CADd;AAEHC,IAAAA,gBAAgB,GAAG;AAFhB,MAGFL,OAHJ;;AAKA,MAAII,cAAc,CAACE,QAAf,CAAwBL,GAAG,CAACM,MAA5B,CAAJ,EAAyC;AACtCT,IAAAA,GAAG,CAACU,KAAJ,CAAW,YAAWP,GAAG,CAACM,MAAO,UAAjC;AACAJ,IAAAA,IAAI;AACJ;AACF;;AAED,QAAMM,UAAU,GAAGR,GAAG,CAACS,IAAJ,CAASC,KAAT,CAAeC,OAAf,CAAuB,GAAvB,CAAnB;AACA,QAAMC,aAAa,GAAGZ,GAAG,CAACS,IAAJ,CAASC,KAAT,CAAeG,MAAf,CAAsB,CAAtB,EAAyBL,UAAzB,CAAtB;AACA,QAAMM,aAAa,GAAGd,GAAG,CAACS,IAAJ,CAASC,KAAT,CAAeG,MAAf,CACnBL,UAAU,GAAG,CADM,EAEnBR,GAAG,CAACS,IAAJ,CAASC,KAAT,CAAeC,OAAf,CAAuB,GAAvB,IAA8BH,UAA9B,GAA2C,CAFxB,CAAtB;;AAKA,MAAII,aAAa,KAAK,OAAtB,EAA+B;AAC5Bf,IAAAA,GAAG,CAACU,KAAJ,CAAU,mBAAV;AACAL,IAAAA,IAAI;AACJ;AACF;;AAED,MAAIE,gBAAgB,CAACC,QAAjB,CAA0BS,aAA1B,CAAJ,EAA8C;AAC3CjB,IAAAA,GAAG,CAACU,KAAJ,CAAW,oBAAmBO,aAAc,EAA5C;AACAZ,IAAAA,IAAI;AACJ;AACF;;AAED,QAAMa,WAAW,GAAGf,GAAG,CAACgB,MAAJ,CAAW,cAAX,CAApB;AACA,QAAMC,UAAU,GAAGjB,GAAG,CAACkB,KAAJ,CAAUC,SAA7B;;AAEA,MAAIJ,WAAW,KAAKE,UAApB,EAAgC;AAC7BpB,IAAAA,GAAG,CAACuB,KAAJ,CAAU,4DAAV;AACAnB,IAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAClBD,MAAAA,MAAM,EAAE,GADU;AAElBE,MAAAA,OAAO,EAAE;AAFS,KAArB;AAIA;AACF;;AAEDrB,EAAAA,IAAI;AACN,CA5CD;AA8CA;;;;;;;;;eAOe,CAACsB,GAAD,EAAMC,KAAN,EAAarB,gBAAb,KAAkC;AAC9CoB,EAAAA,GAAG,CAACE,GAAJ,CACGD,KADH,EAEG3B,IAAI,CAAC;AACFM,IAAAA;AADE,GAAD,CAFP;AAMF,C","sourcesContent":["import createLogger from '../utils/logger';\n\nconst log = createLogger('CSRF middleware');\n\n// Performs CSRF check using the double submit method.  It compares the token in the jwt,\n// with the token in the header.  If they are equal, we're good.  If not, we have a hijack attempt.\nconst csrf = (options) => (req, res, next) => {\n   const {\n      ignoredMethods = ['GET', 'OPTIONS', 'HEAD'],\n      ignoredMutations = []\n   } = options;\n\n   if (ignoredMethods.includes(req.method)) {\n      log.trace(`Ignoring ${req.method} request`);\n      next();\n      return;\n   }\n\n   const spaceIndex = req.body.query.indexOf(' ');\n   const operationType = req.body.query.substr(0, spaceIndex);\n   const operationName = req.body.query.substr(\n      spaceIndex + 1,\n      req.body.query.indexOf('(') - spaceIndex - 1\n   );\n\n   if (operationType === 'query') {\n      log.trace('Ignoring queries.');\n      next();\n      return;\n   }\n\n   if (ignoredMutations.includes(operationName)) {\n      log.trace(`Ignored mutation ${operationName}`);\n      next();\n      return;\n   }\n\n   const headerValue = req.header('X-CSRF-Token');\n   const tokenValue = req.token.csrfToken;\n\n   if (headerValue !== tokenValue) {\n      log.error('CSRF token verification failed.  Two values are not equal.');\n      res.status(403).json({\n         status: 403,\n         message: 'FORBIDDEN'\n      });\n      return;\n   }\n\n   next();\n};\n\n/**\n *\n * @param {Object} app Express application object\n * @param {string} route The route describing where to attach the middleware\n * @param {Array<string>} ignoredMutations List of mutations that should\n * be skipped for CSRF protection.\n */\nexport default (app, route, ignoredMutations) => {\n   app.use(\n      route,\n      csrf({\n         ignoredMutations\n      })\n   );\n};\n"],"file":"csrf.js"}